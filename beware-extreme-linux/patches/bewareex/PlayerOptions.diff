--- PlayerOptions.cpp	Thu Jan 12 14:59:16 2006
+++ PlayerOptions.cp_	Wed Jul 26 22:50:12 2006
@@ -176,6 +176,114 @@
 	return sReturn;
 }
 
+
+CString PlayerOptions::GetStringGameMode() const
+{
+	CString sReturn;
+
+	if( !m_fTimeSpacing )
+	{
+		if( m_fScrollSpeed != 1 )
+		{
+			/* -> 1.00 */
+			CString s = ssprintf( "%2.2f", m_fScrollSpeed );
+			if( s[s.GetLength()-1] == '0' ) {
+				/* -> 1.0 */
+				s.erase(s.GetLength()-1);	// delete last char
+				if( s[s.GetLength()-1] == '0' ) {
+					/* -> 1 */
+					s.erase(s.GetLength()-2);	// delete last 2 chars
+				}
+			}
+			sReturn += "x" + s + ", "; //x speed --beware
+		}
+	}
+	else
+	{
+		CString s = ssprintf( "C%.0f", m_fScrollBPM );
+		sReturn += s + ", ";
+	}
+
+//	sReturn += AddPart( m_fAccels[ACCEL_BOOST],		"Boost" );
+	sReturn += AddPart( m_fAccels[ACCEL_BRAKE],		"Brake" );
+	sReturn += AddPart( m_fAccels[ACCEL_WAVE],		"Wave" );
+	sReturn += AddPart( m_fAccels[ACCEL_EXPAND],	"Expand" );
+	sReturn += AddPart( m_fAccels[ACCEL_BOOMERANG],	"Boomerang" );
+
+	sReturn += AddPart( m_fEffects[EFFECT_DRUNK],	"Drunk" );
+	sReturn += AddPart( m_fEffects[EFFECT_DIZZY],	"Dizzy" );
+	sReturn += AddPart( m_fEffects[EFFECT_MINI],	"Mini" );
+	sReturn += AddPart( m_fEffects[EFFECT_FLIP],	"Flip" );
+	sReturn += AddPart( m_fEffects[EFFECT_TORNADO],	"Tornado" );
+	sReturn += AddPart( m_fEffects[EFFECT_TIPSY],	"Tipsy" );
+	sReturn += AddPart( m_fEffects[EFFECT_BUMPY],	"Bumpy" );
+	sReturn += AddPart( m_fEffects[EFFECT_BEAT],	"Beat" );
+
+//	sReturn += AddPart( m_fAppearances[APPEARANCE_HIDDEN],	"Hidden" );
+//	sReturn += AddPart( m_fAppearances[APPEARANCE_SUDDEN],	"Sudden" );
+//	sReturn += AddPart( m_fAppearances[APPEARANCE_STEALTH],	"Stealth" );
+//	sReturn += AddPart( m_fAppearances[APPEARANCE_BLINK],	"Blink" );
+//	sReturn += AddPart( m_fAppearances[APPEARANCE_RANDOMVANISH],	"RandomVanish" );
+
+//	sReturn += AddPart( m_fScrolls[SCROLL_REVERSE],		"Reverse" );
+	sReturn += AddPart( m_fScrolls[SCROLL_SPLIT],		"Split" );
+	sReturn += AddPart( m_fScrolls[SCROLL_ALTERNATE],	"Alternate" );
+	sReturn += AddPart( m_fScrolls[SCROLL_CROSS],		"Cross" );
+	sReturn += AddPart( m_fScrolls[SCROLL_CENTERED],	"Centered" );
+
+//	sReturn += AddPart( m_fDark, "Dark");
+
+	sReturn += AddPart( m_fBlind,	"Blind");
+	sReturn += AddPart( m_fCover,	"Cover");
+
+	sReturn += AddPart( m_fPassmark, "Passmark");
+
+	if( m_bTurns[TURN_MIRROR] )			sReturn += "Mirror, ";
+	if( m_bTurns[TURN_LEFT] )			sReturn += "Left, ";
+	if( m_bTurns[TURN_RIGHT] )			sReturn += "Right, ";
+	if( m_bTurns[TURN_SHUFFLE] )		sReturn += "Shuf, ";
+	if( m_bTurns[TURN_SUPER_SHUFFLE] )	sReturn += "SuperShuffle, ";
+
+//	if( m_bTransforms[TRANSFORM_NOHOLDS] )	sReturn += "NoHolds, ";
+	if( m_bTransforms[TRANSFORM_NOMINES] )	sReturn += "NoMines, ";
+	if( m_bTransforms[TRANSFORM_LITTLE] )	sReturn += "Little, ";
+	if( m_bTransforms[TRANSFORM_WIDE] )		sReturn += "Wide, ";
+	if( m_bTransforms[TRANSFORM_BIG] )		sReturn += "Big, ";
+	if( m_bTransforms[TRANSFORM_QUICK] )	sReturn += "Quick, ";
+	if( m_bTransforms[TRANSFORM_BMRIZE] )	sReturn += "BMRize, ";
+	if( m_bTransforms[TRANSFORM_SKIPPY] )	sReturn += "Skippy, ";
+	if( m_bTransforms[TRANSFORM_MINES] )	sReturn += "Mines, ";
+	if( m_bTransforms[TRANSFORM_ECHO] )		sReturn += "Echo, ";
+	if( m_bTransforms[TRANSFORM_STOMP] )	sReturn += "Stomp, ";
+	if( m_bTransforms[TRANSFORM_PLANTED] )	sReturn += "Planted, ";
+	if( m_bTransforms[TRANSFORM_FLOORED] )	sReturn += "Floored, ";
+	if( m_bTransforms[TRANSFORM_TWISTER] )	sReturn += "Twister, ";
+	if( m_bTransforms[TRANSFORM_NOJUMPS] )	sReturn += "NoJumps, ";
+	if( m_bTransforms[TRANSFORM_NOHANDS] )	sReturn += "NoHands, ";
+	if( m_bTransforms[TRANSFORM_NOQUADS] )	sReturn += "NoQuads, ";
+
+	if( m_bProTiming )		sReturn += "ProTiming, ";
+
+	if( m_fSkew==1 && m_fPerspectiveTilt==-1 )
+		sReturn += "Incoming, ";
+	else if( m_fSkew==1 && m_fPerspectiveTilt==+1 )
+		sReturn += "Space, ";
+	else if( m_fSkew==0 && m_fPerspectiveTilt==-1 )
+		sReturn += "Hallway, ";
+	else if( m_fSkew==0 && m_fPerspectiveTilt==+1 )
+		sReturn += "Distant, ";
+
+	if( !m_sPositioning.empty() )
+		sReturn += m_sPositioning + ", ";
+	if( !m_sNoteSkin.empty()  && m_sNoteSkin.CompareNoCase("default")!=0 && m_sNoteSkin.CompareNoCase("solo")!=0 && m_sNoteSkin.CompareNoCase("soloflat")!=0 )
+		sReturn += m_sNoteSkin + ", ";
+	if( !m_sNoteSkin.empty()  && m_sNoteSkin.CompareNoCase("soloflat")==0 ) sReturn += "flat, ";
+
+	if( sReturn.GetLength() > 2 )
+		sReturn.erase( sReturn.GetLength()-2 );	// delete the trailing ", "
+	return sReturn;
+}
+
 /* Options are added to the current settings; call Init() beforehand if
  * you don't want this. */
 void PlayerOptions::FromString( CString sOptions )
@@ -360,6 +468,8 @@
 void PlayerOptions::NextAccel()
 {
 	NextFloat( m_fAccels, NUM_ACCELS );
+	if (m_fAccels[ACCEL_BRAKE] > 0)
+		m_fAccels[ACCEL_BRAKE] = 0;
 }
 
 void PlayerOptions::NextEffect()
@@ -370,11 +480,35 @@
 void PlayerOptions::NextAppearance()
 {
 	NextFloat( m_fAppearances, NUM_APPEARANCES );
+	if (m_fAppearances[APPEARANCE_BLINK] > 0)	
+		NextFloat( m_fAppearances, NUM_APPEARANCES );
+	if (m_fAppearances[APPEARANCE_RANDOMVANISH] > 0)	
+		NextFloat( m_fAppearances, NUM_APPEARANCES );
 }
 
 void PlayerOptions::NextTurn()
 {
-	NextBool( m_bTurns, NUM_TURNS );
+//	NextBool( m_bTurns, NUM_TURNS );
+//abusing this routine for the "other" option because i dont use them and it saves on editing other source files
+// must cycle: OFF LITTLE FLAT SOLO DARK  -beware
+	if (m_bTransforms[TRANSFORM_LITTLE]) {
+		m_bTransforms[TRANSFORM_LITTLE] = false;
+		m_sNoteSkin = "flat";
+		//from little to flat
+	} else if (!m_sNoteSkin.CompareNoCase("flat")) {
+		m_sNoteSkin = "solo";
+		//from flat to solo
+	} else if (!m_sNoteSkin.CompareNoCase("solo")) {
+		m_sNoteSkin = "default";
+		m_fDark = 1;
+		//solo to dark
+	} else if (m_fDark > 0) {
+		m_fDark = 0;	
+		//from dark to none
+	} else {
+		m_bTransforms[TRANSFORM_LITTLE] = true;
+		//from none to little
+	}
 }
 
 void PlayerOptions::NextTransform()
@@ -385,6 +519,8 @@
 void PlayerOptions::NextScroll()
 {
 	NextFloat( m_fScrolls, NUM_SCROLLS );
+	if (m_fScrolls[SCROLL_SPLIT] > 0)
+		m_fScrolls[SCROLL_SPLIT] = 0;
 }
 
 void PlayerOptions::NextPerspective()
